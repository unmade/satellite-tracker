{"version":3,"sources":["module.js","earth.js","main.js"],"names":["TRACKER","namespace","ns","i","parts","split","parent","slice","length","earth","atmosphere","Kr","Km","ESun","g","innerRadius","outerRadius","wavelength","scaleDepth","mieScaleDepth","diffuse","THREE","ImageUtils","loadTexture","diffuseNight","uniforms","v3LightPosition","type","value","Vector3","normalize","v3InvWavelength","Math","pow","fCameraHeight","fCameraHeight2","fInnerRadius","fInnerRadius2","fOuterRadius","fOuterRadius2","fKrESun","fKmESun","fKr4PI","PI","fKm4PI","fScale","fScaleDepth","fScaleOverScaleDepth","g2","nSamples","fSamples","tDiffuse","tDiffuseNight","tDisplacement","tSkyboxDiffuse","fNightScale","ground","geometry","SphereGeometry","material","ShaderMaterial","vertexShader","$","text","fragmentShader","mesh","Mesh","sky","side","BackSide","transparent","document","ready","render","controls","update","requestAnimationFrame","cameraHeight","euler","light","matrix","vector","f","Euler","Matrix4","makeRotationFromEuler","applyMatrix4","camera","position","renderer","scene","axes","axisLength","v","x","y","z","createAxis","p1","p2","color","line","lineGeometry","Geometry","lineMat","LineBasicMaterial","vertices","push","Line","add","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","webglEl","getElementById","width","height","Scene","PerspectiveCamera","set","up","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setClearColor","appendChild","domElement","TrackballControls","debugaxis","addEventListener"],"mappings":"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","file":"elektro-tracker.min.js","sourcesContent":["'use strict';\n\n\nvar TRACKER = TRACKER || {};\n\nTRACKER.namespace = function(ns) {\n    var parts = ns.split('.'),\n        parent = TRACKER,\n        i;\n    if (parts[0] === \"TRACKER\") {\n        parts = parts.slice(1);\n    }\n    for (i = 0; i < parts.length; i += 1) {\n       if (typeof parent[parts[i]] === \"undefined\") {\n           parent[parts[i]] = {};\n       }\n       parent = parent[parts[i]];\n   }\n   return parent;\n};\n","'use strict';\n\n\nTRACKER.namespace('earth');\n\nTRACKER.earth = (function() {\n    var atmosphere = {\n        Kr: 0.0025,\n        Km: 0.0010,\n        ESun: 20.0,\n        g: -0.950,\n        innerRadius: 100.0,\n        outerRadius: 102.5,\n        wavelength: [0.650, 0.570, 0.475],\n        scaleDepth: 0.25,\n        mieScaleDepth: 0.1\n    };\n\n    var diffuse = THREE.ImageUtils.loadTexture('/src/images/diffuse-low.jpg'),\n        diffuseNight = THREE.ImageUtils.loadTexture('/src/images/diffuse-night-low.jpg');\n\n    var uniforms = {\n        v3LightPosition: {\n            type: \"v3\",\n            value: new THREE.Vector3(1e8, 0, 1e8).normalize()\n        },\n        v3InvWavelength: {\n            type: \"v3\",\n            value: new THREE.Vector3(1 / Math.pow(atmosphere.wavelength[0], 4),\n                                     1 / Math.pow(atmosphere.wavelength[1], 4),\n                                     1 / Math.pow(atmosphere.wavelength[2], 4))\n        },\n        fCameraHeight: {\n            type: \"f\",\n            value: 0\n        },\n        fCameraHeight2: {\n            type: \"f\",\n            value: 0\n        },\n        fInnerRadius: {\n            type: \"f\",\n            value: atmosphere.innerRadius\n        },\n        fInnerRadius2: {\n            type: \"f\",\n            value: atmosphere.innerRadius * atmosphere.innerRadius\n        },\n        fOuterRadius: {\n            type: \"f\",\n            value: atmosphere.outerRadius\n        },\n        fOuterRadius2: {\n            type: \"f\",\n            value: atmosphere.outerRadius * atmosphere.outerRadius\n        },\n        fKrESun: {\n            type: \"f\",\n            value: atmosphere.Kr * atmosphere.ESun\n        },\n        fKmESun: {\n            type: \"f\",\n            value: atmosphere.Km * atmosphere.ESun\n        },\n        fKr4PI: {\n            type: \"f\",\n            value: atmosphere.Kr * 4.0 * Math.PI\n        },\n        fKm4PI: {\n            type: \"f\",\n            value: atmosphere.Km * 4.0 * Math.PI\n        },\n        fScale: {\n            type: \"f\",\n            value: 1 / (atmosphere.outerRadius - atmosphere.innerRadius)\n        },\n        fScaleDepth: {\n            type: \"f\",\n            value: atmosphere.scaleDepth\n        },\n        fScaleOverScaleDepth: {\n            type: \"f\",\n            value: 1 / (atmosphere.outerRadius - atmosphere.innerRadius) / atmosphere.scaleDepth\n        },\n        g: {\n            type: \"f\",\n            value: atmosphere.g\n        },\n        g2: {\n            type: \"f\",\n            value: atmosphere.g * atmosphere.g\n        },\n        nSamples: {\n            type: \"i\",\n            value: 3\n        },\n        fSamples: {\n            type: \"f\",\n            value: 3.0\n        },\n        tDiffuse: {\n            type: \"t\",\n            value: diffuse\n        },\n        tDiffuseNight: {\n            type: \"t\",\n            value: diffuseNight\n        },\n        tDisplacement: {\n            type: \"t\",\n            value: 0\n        },\n        tSkyboxDiffuse: {\n            type: \"t\",\n            value: 0\n        },\n        fNightScale: {\n            type: \"f\",\n            value: 1\n        }\n    };\n\n\n    var ground = {\n        geometry: new THREE.SphereGeometry(atmosphere.innerRadius, 50, 50),\n        material: new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: $(\"#vertexGround\").text(),\n            fragmentShader: $(\"#fragmentGround\").text()\n        })\n    };\n    ground.mesh = new THREE.Mesh(ground.geometry, ground.material);\n\n    var sky = {\n        geometry: new THREE.SphereGeometry(atmosphere.outerRadius, 500, 500),\n        material: new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: $(\"#vertexSky\").text(),\n            fragmentShader: $(\"#fragmentSky\").text()\n        })\n    };\n    sky.mesh = new THREE.Mesh(sky.geometry, sky.material);\n\n    sky.material.side = THREE.BackSide;\n    sky.material.transparent = true;\n\n    return {\n        ground: ground,\n        sky: sky\n    }\n\n})();\n","$(document).ready(function() {\n\tvar webglEl = document.getElementById('scene');\n\n\tvar width  = window.innerWidth,\n\t\theight = window.innerHeight;\n\n    var earth = TRACKER.earth;\n\n\tvar scene = new THREE.Scene();\n    scene.add(earth.ground.mesh);\n    scene.add(earth.sky.mesh);\n\n\tvar camera = new THREE.PerspectiveCamera(70, width / height, 0.1, 1000);\n\tcamera.position.set(200, 0, 0);\n\tcamera.up = new THREE.Vector3( 0, 0, 1 );\n\n\tvar renderer = new THREE.WebGLRenderer({ antialias: true });\n\trenderer.setPixelRatio(window.devicePixelRatio || 1);\n\trenderer.setSize(width, height);\n    renderer.setClearColor(0x000000, 1);\n    webglEl.appendChild(renderer.domElement);\n\n\n    var controls = new THREE.TrackballControls(camera);\n\n\tvar debugaxis = axes;\n\tdebugaxis(200);\n\trender();\n\n\tfunction render() {\n\t\tcontrols.update();\n        requestAnimationFrame(render);\n\n        var cameraHeight, euler, eye, light, matrix, vector;\n        var f = 0.0002;\n        var g = 0.008;\n        vector = new THREE.Vector3(1, 0, 0);\n        euler = new THREE.Euler(f, g, 0);\n        matrix = new THREE.Matrix4().makeRotationFromEuler(euler);\n        light = vector.applyMatrix4(matrix);\n        cameraHeight = camera.position.length();\n        earth.sky.material.uniforms.v3LightPosition.value = light;\n        earth.sky.material.uniforms.fCameraHeight.value = cameraHeight;\n        earth.sky.material.uniforms.fCameraHeight2.value = cameraHeight * cameraHeight;\n        earth.ground.material.uniforms.v3LightPosition.value = light;\n        earth.ground.material.uniforms.fCameraHeight.value = cameraHeight;\n        earth.ground.material.uniforms.fCameraHeight2.value = cameraHeight * cameraHeight;\n        return renderer.render(scene, camera);\n\t}\n\n\tfunction axes(axisLength){\n\t\tfunction v(x,y,z){\n\t\t\treturn new THREE.Vector3(x,y,z);\n\t\t}\n\n\t\t// Create axis (point1, point2, colour)\n\t\t// {x: red, y: green, z: blue}\n\t\tfunction createAxis(p1, p2, color){\n\t\t\tvar line, lineGeometry = new THREE.Geometry(),\n\t\t\tlineMat = new THREE.LineBasicMaterial({color: color});\n\t\t\tlineGeometry.vertices.push(p1, p2);\n\t\t\tline = new THREE.Line(lineGeometry, lineMat);\n\t\t\tscene.add(line);\n\t\t}\n\n\t\tcreateAxis(v(-axisLength, 0, 0), v(axisLength, 0, 0), 0xFF0000);\n\t\tcreateAxis(v(0, -axisLength, 0), v(0, axisLength, 0), 0x00FF00);\n\t\tcreateAxis(v(0, 0, -axisLength), v(0, 0, axisLength), 0x0000FF);\n\t};\n\n    function onWindowResize() {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize( window.innerWidth, window.innerHeight );\n    }\n    window.addEventListener( 'resize', onWindowResize, false );\n});\n"],"sourceRoot":"/source/"}