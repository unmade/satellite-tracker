"use strict";var TRACKER=TRACKER||{};TRACKER.namespace=function(R){var e,n=R.split("."),t=TRACKER;for("TRACKER"===n[0]&&(n=n.slice(1)),e=0;e<n.length;e+=1)"undefined"==typeof t[n[e]]&&(t[n[e]]={}),t=t[n[e]];return t};
TRACKER.namespace("utils.Constants"),TRACKER.utils.Constants=function(){"use strict";return{AU:149597870.691,DIFF_EPOCH:2400000.5,GRAD_IN_RAD:.017453292519943295,JULIAN_C:36525,MJD2000:51544.5,OMEGA:2*Math.PI/86164.090530833,PI2:2*Math.PI,SEC_IN_DAY:86400,SEC_IN_RAD:484813681109536e-20,TT_TAI_DIFF:32.184,R0:6378.1363}}();
TRACKER.namespace("utils.CoordinateConverter"),TRACKER.utils.CoordinateConverter=function(){"use strict";function t(t,e,n,o){var s=a(t);return new THREE.Vector3(o*Math.cos(n)*Math.cos(e),o*Math.cos(n)*(Math.cos(s)*Math.sin(e)-Math.sin(s)*Math.tan(n)),o*Math.cos(n)*(Math.sin(s)*Math.sin(e)+Math.cos(s)*Math.tan(n)))}function e(t,e,n,o){var s=a(t);return new THREE.Vector3(e,n*Math.cos(s)-o*Math.sin(s),n*Math.sin(s)+o*Math.cos(s))}function a(t){var e=(t-s.MJD2000)/s.JULIAN_C,a=e*e,n=e*a;return s.SEC_IN_RAD*(84381.448-46.815*e-59e-5*a+.001813*n)}function n(t){return satellite.gstimeFromDate(t.getUTCFullYear(),t.getUTCMonth()+1,t.getUTCDate(),t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds())}function o(t,e,a){return new THREE.Vector3(a*Math.cos(e)*Math.cos(t),a*Math.cos(e)*Math.sin(t),a*Math.sin(e))}var s=TRACKER.utils.Constants;return{eclipSpherToEquCart:t,eclipticToEquatorial:e,getGMST:n,getEpsMean:a,sphericalToCartesian:o}}();
TRACKER.namespace("utils.DateConverter"),TRACKER.utils.DateConverter=function(){"use strict";function e(e){var a=e.getUTCFullYear(),s=e.getUTCMonth()+1,r=e.getUTCDate(),t=e.getUTCHours(),b=e.getUTCMinutes(),k=e.getUTCSeconds(),n=parseInt((14-s)/12),u=a+4800-n,T=s+12*n-3,C=r+parseInt((153*T+2)/5)+365*u+parseInt(u/4)-parseInt(u/100)+parseInt(u/400)-32045,o=C+(t-12)/24+b/1440+k/86400;return o-c.DIFF_EPOCH}function a(e){var a=s(e),r=(a-c.MJD2000)/c.JULIAN_C,t=c.GRAD_IN_RAD*(12860948.6049*r);return a+.001658*Math.sin(t+.0167*Math.sin(t))/c.SEC_IN_DAY}function s(a){var s=e(a),t=r(a.getUTCFullYear(),a.getUTCMonth()+1);return s+t/c.SEC_IN_DAY}function r(e,a){var s=0;switch(e){case 1972:s=a>0&&7>a?10:11;break;case 1973:s=12;break;case 1974:s=13;break;case 1975:s=14;break;case 1976:s=15;break;case 1977:s=16;break;case 1978:s=17;break;case 1979:s=18;break;case 1980:s=19;break;case 1981:s=a>0&&7>a?19:20;break;case 1982:s=a>0&&7>a?20:21;break;case 1983:s=a>0&&7>a?21:22;break;case 1984:s=22;break;case 1985:s=a>0&&7>a?22:23;break;case 1986:case 1987:s=23;break;case 1988:case 1989:s=24;break;case 1990:s=25;break;case 1991:s=26;break;case 1992:s=a>0&&7>a?26:27;break;case 1993:s=a>0&&7>a?27:28;break;case 1994:s=a>0&&7>a?28:29;break;case 1995:s=29;break;case 1996:s=30;break;case 1997:s=a>0&&7>a?30:31;break;case 1998:s=31;break;case 1999:case 2e3:case 2001:case 2002:case 2003:case 2004:case 2005:s=32;break;case 2006:case 2007:case 2008:s=33;break;case 2009:case 2010:case 2011:s=34;break;case 2012:s=a>0&&7>a?34:35;break;case 2013:case 2014:s=35;break;case 2015:s=a>0&&7>a?35:36;break;default:s=e>1972?36:10}return s+c.TT_TAI_DIFF}var c=TRACKER.utils.Constants;return{getDeltaT:r,utcToMjd:e,utcToTdb:a,utcToTT:s}}();
TRACKER.namespace("utils.Loaders"),TRACKER.utils.Loaders=function(){"use strict";function e(e,r,o){var n=$.Deferred(),d=new THREE.OBJLoader;return d.load(o,function(o){e[r]=o,n.resolve()}),n}function r(e,r,o,n){var d=$.Deferred(),a=new THREE.MTLLoader;return a.load(n,function(n){n.preload();var a=new THREE.OBJLoader;a.setMaterials(n),a.load(o,function(o){e[r]=o,d.resolve()})}),d.promise()}function o(e,r,o){var n=$.Deferred(),d=new THREE.TextureLoader;return d.load(o,function(o){e[r]=o,n.resolve()}),n}return{defferedOBJLoader:e,defferedOBJMTLLoader:r,defferedTextureLoader:o}}();
TRACKER.namespace("CelestialObject"),TRACKER.CelestialObject=function(){"use strict";function e(t){var n,a,r,i;this.atmosphere={Kr:.0025,Km:.001,ESun:20,g:-.95,innerRadius:100,innerSegments:50,outerRadius:101.5,outerSegments:128,wavelength:[.55,.5,.475],scaleDepth:.25},t&&(t.atmosphere&&$.extend(this.atmosphere,t.atmosphere),n=t.diffuse,a=t.diffuseNight,r=t.diffuseSpecular),i=e.uniforms.configureUniforms(n,a,r,this.atmosphere),this.ground=new THREE.Mesh(new THREE.SphereGeometry(this.atmosphere.innerRadius,this.atmosphere.innerSegments,this.atmosphere.innerSegments),new THREE.ShaderMaterial({uniforms:i,vertexShader:"//\n// Atmospheric scattering vertex shader\n//\n// Author: Sean O'Neil\n//\n// Copyright (c) 2004 Sean O'Neil\n//\n// Ported for use with three.js/WebGL by James Baicoianu\n\nuniform mat3 m3RotY;\nuniform vec3 v3LightPosition;		// The direction vector to the light source\nuniform vec3 v3InvWavelength;	// 1 / pow(wavelength, 4) for the red, green, and blue channels\nuniform float fCameraHeight;	// The camera's current height\nuniform float fCameraHeight2;	// fCameraHeight^2\nuniform float fOuterRadius;		// The outer (atmosphere) radius\nuniform float fOuterRadius2;	// fOuterRadius^2\nuniform float fInnerRadius;		// The inner (planetary) radius\nuniform float fInnerRadius2;	// fInnerRadius^2\nuniform float fKrESun;			// Kr * ESun\nuniform float fKmESun;			// Km * ESun\nuniform float fKr4PI;			// Kr * 4 * PI\nuniform float fKm4PI;			// Km * 4 * PI\nuniform float fScale;			// 1 / (fOuterRadius - fInnerRadius)\nuniform float fScaleDepth;		// The scale depth (i.e. the altitude at which the atmosphere's average density is found)\nuniform float fScaleOverScaleDepth;	// fScale / fScaleDepth\nuniform sampler2D tDiffuse;\n\nvarying vec3 v3Direction;\nvarying vec3 c0;\nvarying vec3 c1;\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\nconst int nSamples = 3;\nconst float fSamples = 3.0;\n\nfloat scale(float fCos)\n{\n    float x = 1.0 - fCos;\n    return fScaleDepth * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\n}\n\nvoid main(void)\n{\n\n    vec3 corrCameraPosition = m3RotY * cameraPosition;\n    // Get the ray from the camera to the vertex and its length\n    // (which is the far point of the ray passing through the atmosphere)\n\n    vec3 v3Ray = position - corrCameraPosition;\n    float fFar = length(v3Ray);\n    v3Ray /= fFar;\n\n    // Calculate the closest intersection of the ray with the outer atmosphere\n    // (which is the near point of the ray passing through the atmosphere)\n    float B = 2.0 * dot(corrCameraPosition, v3Ray);\n    float C = fCameraHeight2 - fOuterRadius2;\n    float fDet = max(0.0, B*B - 4.0 * C);\n    float fNear = 0.5 * (-B - sqrt(fDet));\n\n    // Calculate the ray's starting position, then calculate its scattering offset\n    vec3 v3Start = corrCameraPosition + v3Ray * fNear;\n    fFar -= fNear;\n    float fDepth = exp((fInnerRadius - fOuterRadius) / fScaleDepth);\n    float fCameraAngle = dot(-v3Ray, position) / length(position);\n    float fLightAngle = dot(m3RotY*v3LightPosition, position) / length(position);\n    float fCameraScale = scale(fCameraAngle);\n    float fLightScale = scale(fLightAngle);\n    float fCameraOffset = fDepth*fCameraScale;\n    float fTemp = (fLightScale + fCameraScale);\n\n    // Initialize the scattering loop variables\n    float fSampleLength = fFar / fSamples;\n    float fScaledLength = fSampleLength * fScale;\n    vec3 v3SampleRay = v3Ray * fSampleLength;\n    vec3 v3SamplePoint = v3Start + v3SampleRay * 0.5;\n\n    // Now loop through the sample rays\n    vec3 v3FrontColor = vec3(0.0, 0.0, 0.0);\n    vec3 v3Attenuate;\n    for(int i=0; i<nSamples; i++)\n    {\n        float fHeight = length(v3SamplePoint);\n        float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));\n        float fScatter = fDepth*fTemp - fCameraOffset;\n        v3Attenuate = exp(-fScatter * (v3InvWavelength * fKr4PI + fKm4PI)) / 1.1;\n        v3FrontColor += v3Attenuate * (fDepth * fScaledLength);\n        v3SamplePoint += v3SampleRay;\n    }\n\n    // Calculate the attenuation factor for the ground\n    c0 = v3Attenuate;\n    c1 = v3FrontColor * (v3InvWavelength * fKrESun + fKmESun);\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    vUv = uv;\n    vNormal = normal;\n}",fragmentShader:"//\n// Atmospheric scattering fragment shader\n//\n// Author: Sean O'Neil\n//\n// Copyright (c) 2004 Sean O'Neil\n//\n// Ported for use with three.js/WebGL by James Baicoianu\n\nuniform mat3 m3RotY;\nuniform float fNightScale;\nuniform float fSpecularScale;\nuniform float fSpecularSize;\nuniform vec3 v3LightPosition;\nuniform sampler2D tDiffuse;\nuniform sampler2D tDiffuseNight;\nuniform sampler2D tDiffuseSpecular;\n\nvarying vec3 c0;\nvarying vec3 c1;\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\nvoid main (void)\n{\n    vec3 diffuseTex = texture2D( tDiffuse, vUv ).xyz;\n    vec3 diffuseNightTex = texture2D( tDiffuseNight, vUv ).xyz;\n    vec3 diffuseSpecularTex = texture2D(tDiffuseSpecular, vUv).xyz;\n\n    float specularMix = pow(fSpecularScale * dot(normalize(vNormal), m3RotY*v3LightPosition), fSpecularSize) *\n                            (diffuseSpecularTex.z * 0.5);\n\n    vec3 day = diffuseTex * c0;\n    vec3 night = fNightScale * diffuseNightTex * diffuseNightTex * diffuseNightTex * (1.0 - c0);\n    vec3 specular = diffuseSpecularTex * specularMix * c0;\n\n    gl_FragColor = vec4(c1, 1.0) + vec4(day + night + specular, 1.0);\n}"})),this.sky=new THREE.Mesh(new THREE.SphereGeometry(this.atmosphere.outerRadius,this.atmosphere.outerSegments,this.atmosphere.outerSegments),new THREE.ShaderMaterial({uniforms:i,vertexShader:"//\n// Atmospheric scattering vertex shader\n//\n// Author: Sean O'Neil\n//\n// Copyright (c) 2004 Sean O'Neil\n//\n\nuniform mat3 m3RotY;\nuniform vec3 v3LightPosition;	// The direction vector to the light source\nuniform vec3 v3InvWavelength;	// 1 / pow(wavelength, 4) for the red, green, and blue channels\nuniform float fCameraHeight;	// The camera's current height\nuniform float fCameraHeight2;	// fCameraHeight^2\nuniform float fOuterRadius;		// The outer (atmosphere) radius\nuniform float fOuterRadius2;	// fOuterRadius^2\nuniform float fInnerRadius;		// The inner (planetary) radius\nuniform float fInnerRadius2;	// fInnerRadius^2\nuniform float fKrESun;			// Kr * ESun\nuniform float fKmESun;			// Km * ESun\nuniform float fKr4PI;			// Kr * 4 * PI\nuniform float fKm4PI;			// Km * 4 * PI\nuniform float fScale;			// 1 / (fOuterRadius - fInnerRadius)\nuniform float fScaleDepth;		// The scale depth (i.e. the altitude at which the atmosphere's average density is found)\nuniform float fScaleOverScaleDepth;	// fScale / fScaleDepth\n\nconst int nSamples = 3;\nconst float fSamples = 3.0;\n\nvarying vec3 v3Direction;\nvarying vec3 c0;\nvarying vec3 c1;\n\n\nfloat scale(float fCos)\n{\n    float x = 1.0 - fCos;\n    return fScaleDepth * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\n}\n\nvoid main(void)\n{\n    vec3 corrCameraPosition = m3RotY * cameraPosition;\n    // Get the ray from the camera to the vertex and its length\n    // (which is the far point of the ray passing through the atmosphere)\n    vec3 v3Ray = position - corrCameraPosition;\n    float fFar = length(v3Ray);\n    v3Ray /= fFar;\n\n    // Calculate the closest intersection of the ray with the outer atmosphere\n    // (which is the near point of the ray passing through the atmosphere)\n    float B = 2.0 * dot(corrCameraPosition, v3Ray);\n    float C = fCameraHeight2 - fOuterRadius2;\n    float fDet = max(0.0, B*B - 4.0 * C);\n    float fNear = 0.5 * (-B - sqrt(fDet));\n\n    // Calculate the ray's starting position, then calculate its scattering offset\n    vec3 v3Start = corrCameraPosition + v3Ray * fNear;\n    fFar -= fNear;\n    float fStartAngle = dot(v3Ray, v3Start) / fOuterRadius;\n    float fStartDepth = exp(-1.0 / fScaleDepth);\n    float fStartOffset = fStartDepth * scale(fStartAngle);\n\n    // Initialize the scattering loop variables\n    float fSampleLength = fFar / fSamples;\n    float fScaledLength = fSampleLength * fScale;\n    vec3 v3SampleRay = v3Ray * fSampleLength;\n    vec3 v3SamplePoint = v3Start + v3SampleRay * 0.5;\n\n    // Now loop through the sample rays\n    vec3 v3FrontColor = vec3(0.0, 0.0, 0.0);\n    for(int i=0; i<nSamples; i++)\n    {\n        float fHeight = length(v3SamplePoint);\n        float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));\n        float fLightAngle = dot(m3RotY*v3LightPosition, v3SamplePoint) / fHeight;\n        float fCameraAngle = dot(v3Ray, v3SamplePoint) / fHeight;\n        float fScatter = (fStartOffset + fDepth * (scale(fLightAngle) - scale(fCameraAngle)));\n        vec3 v3Attenuate = exp(-fScatter * (v3InvWavelength * fKr4PI + fKm4PI));\n\n        v3FrontColor += v3Attenuate * (fDepth * fScaledLength);\n        v3SamplePoint += v3SampleRay;\n    }\n\n    // Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    c0 = v3FrontColor * (v3InvWavelength * fKrESun);\n    c1 = v3FrontColor * fKmESun;\n    v3Direction = corrCameraPosition - position;\n}",fragmentShader:"//\n// Atmospheric scattering fragment shader\n//\n// Author: Sean O'Neil\n//\n// Copyright (c) 2004 Sean O'Neil\n//\n\nuniform vec3 v3LightPos;\nuniform float g;\nuniform float g2;\n\nvarying vec3 v3Direction;\nvarying vec3 c0;\nvarying vec3 c1;\n\n// Calculates the Mie phase function\nfloat getMiePhase(float fCos, float fCos2, float g, float g2)\n{\n    return 1.5 * ((1.0 - g2) / (2.0 + g2)) * (1.0 + fCos2) / pow(1.0 + g2 - 2.0 * g * fCos, 1.5);\n}\n\n// Calculates the Rayleigh phase function\nfloat getRayleighPhase(float fCos2)\n{\n    return 0.75 + 0.75 * fCos2;\n}\n\nvoid main (void)\n{\n    float fCos = dot(v3LightPos, v3Direction) / length(v3Direction);\n    float fCos2 = fCos * fCos;\n\n    vec3 color =	getRayleighPhase(fCos2) * c0 +\n                    getMiePhase(fCos, fCos2, g, g2) * c1;\n\n    gl_FragColor = vec4(color, 1.0);\n    gl_FragColor.a = gl_FragColor.b;\n}",side:THREE.BackSide,transparent:!0}))}return e.prototype.ESun=function(t){if(!arguments.length)return this.atmosphere.ESun;var n=e.uniforms.calcfKrESun(this.atmosphere.Kr,t),a=e.uniforms.calcfKmESun(this.atmosphere.Km,t);return this.atmosphere.ESun=t,this.ground.material.uniforms.fKrESun.value=n,this.ground.material.uniforms.fKmESun.value=a,this.sky.material.uniforms.fKmESun.value=a,this.sky.material.uniforms.fKrESun.value=n,this},e.prototype.g=function(e){if(!arguments.length)return this.atmosphere.g;var t=e*e;return this.atmosphere.g=e,this.sky.material.uniforms.g.value=e,this.sky.material.uniforms.g2.value=t,this.ground.material.uniforms.g.value=e,this.ground.material.uniforms.g2.value=t,this},e.prototype.Km=function(t){if(!arguments.length)return this.atmosphere.Km;var n=e.uniforms.calcfKmESun(t,this.atmosphere.ESun),a=e.uniforms.calcfKm4PI(t);return this.atmosphere.Km=t,this.ground.material.uniforms.fKmESun.value=n,this.ground.material.uniforms.fKm4PI.value=a,this.sky.material.uniforms.fKm4PI.value=a,this.sky.material.uniforms.fKmESun.value=n,this},e.prototype.Kr=function(t){if(!arguments.length)return this.atmosphere.Kr;var n=e.uniforms.calcfKrESun(t,this.atmosphere.ESun),a=e.uniforms.calcfKr4PI(t);return this.atmosphere.Kr=t,this.ground.material.uniforms.fKrESun.value=n,this.ground.material.uniforms.fKr4PI.value=a,this.sky.material.uniforms.fKr4PI.value=a,this.sky.material.uniforms.fKrESun.value=n,this},e.prototype.lightPosition=function(e){return arguments.length?(this.ground.material.uniforms.v3LightPosition.value.copy(e).normalize(),this.sky.material.uniforms.v3LightPosition.value.copy(e).normalize(),this):this.ground.material.uniforms.v3LightPosition.value},e.prototype.position=function(e){return arguments.length?(this.ground.position.copy(e),this.sky.position.copy(e),this):this.ground.position},e.prototype.rotateY=function(e){var t=Math.cos(e),n=Math.sin(e);return this.ground.rotation.y=e,this.ground.material.uniforms.m3RotY.value.set(t,0,-n,0,1,0,n,0,t),this.sky.rotation.y=e,this.sky.material.uniforms.m3RotY.value.set(t,0,-n,0,1,0,n,0,t),this},e.prototype.setTextures=function(e){return e.diffuse&&(this.ground.material.uniforms.tDiffuse.value=e.diffuse),e.diffuseNight&&(this.ground.material.uniforms.tDiffuseNight.value=e.diffuseNight),e.diffuseSpecular&&(this.ground.material.uniforms.tDiffuseSpecular.value=e.diffuseSpecular),this},e.prototype.scaleDepth=function(t){if(!arguments.length)return this.atmosphere.scaleDepth;var n=e.uniforms.calcfScaleOverScaleDepth(this.atmosphere.innerRadius,this.atmosphere.outerRadius,this.atmosphere.scaleDepth);return this.atmosphere.scaleDepth=t,this.ground.material.uniforms.fScaleDepth.value=t,this.ground.material.uniforms.fScaleDepth.value=t,this.sky.material.uniforms.fScaleOverScaleDepth.value=n,this.sky.material.uniforms.fScaleOverScaleDepth.value=n,this},e.prototype.waveBlue=function(t){if(!arguments.length)return this.atmosphere.wavelength[2];var n=e.uniforms.calcvWaveChannel(t);return this.atmosphere.wavelength[2]=t,this.ground.material.uniforms.v3InvWavelength.value.setZ(n),this.sky.material.uniforms.v3InvWavelength.value.setZ(n),this},e.prototype.waveGreen=function(t){if(!arguments.length)return this.atmosphere.wavelength[1];var n=e.uniforms.calcvWaveChannel(t);return this.atmosphere.wavelength[1]=t,this.ground.material.uniforms.v3InvWavelength.value.setY(n),this.sky.material.uniforms.v3InvWavelength.value.setY(n),this},e.prototype.waveRed=function(t){if(!arguments.length)return this.atmosphere.wavelength[0];var n=e.uniforms.calcvWaveChannel(t);return this.atmosphere.wavelength[0]=t,this.ground.material.uniforms.v3InvWavelength.value.setX(n),this.sky.material.uniforms.v3InvWavelength.value.setX(n),this},e}();
TRACKER.namespace("CelestialObject.uniforms"),TRACKER.CelestialObject.uniforms=function(){"use strict";function e(e,t){return e*t}function t(e,t){return e*t}function u(e){return 4*e*Math.PI}function a(e){return 4*e*Math.PI}function n(e,t,u){return 1/(t-e)/u}function f(e){return 1/Math.pow(e,4)}function l(l,r,i,c){return{m3RotY:{type:"m3",value:new THREE.Matrix3},v3LightPosition:{type:"v3",value:new THREE.Vector3(1e8,0,1e8).normalize()},v3InvWavelength:{type:"v3",value:new THREE.Vector3(f(c.wavelength[0]),f(c.wavelength[1]),f(c.wavelength[2]))},fCameraHeight:{type:"f",value:0},fCameraHeight2:{type:"f",value:0},fInnerRadius:{type:"f",value:c.innerRadius},fInnerRadius2:{type:"f",value:c.innerRadius*c.innerRadius},fOuterRadius:{type:"f",value:c.outerRadius},fOuterRadius2:{type:"f",value:c.outerRadius*c.outerRadius},fKrESun:{type:"f",value:e(c.Kr,c.ESun)},fKmESun:{type:"f",value:t(c.Km,c.ESun)},fKr4PI:{type:"f",value:u(c.Kr)},fKm4PI:{type:"f",value:a(c.Km)},fScale:{type:"f",value:1/(c.outerRadius-c.innerRadius)},fScaleDepth:{type:"f",value:c.scaleDepth},fScaleOverScaleDepth:{type:"f",value:n(c.innerRadius,c.outerRadius,c.scaleDepth)},g:{type:"f",value:c.g},g2:{type:"f",value:c.g*c.g},tDiffuse:{type:"t",value:l},tDiffuseNight:{type:"t",value:r},tDiffuseSpecular:{type:"t",value:i},fNightScale:{type:"f",value:1},fSpecularScale:{type:"f",value:1},fSpecularSize:{type:"f",value:25}}}return{calcfKrESun:e,calcfKmESun:t,calcfKr4PI:u,calcfKm4PI:a,calcfScaleOverScaleDepth:n,calcvWaveChannel:f,configureUniforms:l}}();
TRACKER.namespace("MoonPosition"),TRACKER.MoonPosition=function(){"use strict";function t(t){return t%1}var n=TRACKER.utils.Constants,i=TRACKER.utils.CoordinateConverter,s=TRACKER.utils.DateConverter;return{getEclipticPosition:function(i){var a=(s.utcToMjd(i)-n.MJD2000)/n.JULIAN_C,o=t(.606433+1336.855225*a),M=n.PI2*t(.374897+1325.55241*a),h=n.PI2*t(.993133+99.997361*a),c=n.PI2*t(.827361+1236.853086*a),e=n.PI2*t(.259086+1342.227825*a),r=22640*Math.sin(M)-4586*Math.sin(M-2*c)+2370*Math.sin(2*c)+769*Math.sin(2*M)-668*Math.sin(h)-412*Math.sin(2*e)-212*Math.sin(2*M-2*c)-206*Math.sin(M+h-2*c)+192*Math.sin(M+2*c)-165*Math.sin(h-2*h)-125*Math.sin(c)-110*Math.sin(M+h)+148*Math.sin(M-h)-55*Math.sin(2*e-2*c),u=e+n.SEC_IN_RAD*(r+412*Math.sin(2*e)+541*Math.sin(h)),E=e-2*c,R=-526*Math.sin(E)+44*Math.sin(M+E)-31*Math.sin(-M+E)-23*Math.sin(h+E)+11*Math.sin(-h+E)-25*Math.sin(-2*M+e)+21*Math.sin(-M+e),C=n.PI2*t(o+r/1296e3),T=n.SEC_IN_RAD*(18520*Math.sin(u)+R),P=3422.7+28.233869*Math.cos(2*c)+3.08589*Math.cos(M+2*c)+186.539296*Math.cos(M)+34.311569*Math.cos(M-2*c)+1.916735*Math.cos(h-2*c)-.977818*Math.cos(c)+10.165933*Math.cos(2*M)-.949147*Math.cos(M+h)+1.443617*Math.cos(M+h-2*c),A=n.R0/(.999953253*n.SEC_IN_RAD*P);return new THREE.Vector3(C,T,A)},getEquatorialPosition:function(t){var n=s.utcToTdb(t),a=this.getEclipticPosition(t),o=i.eclipSpherToEquCart(n,a.x,a.y,a.z);return new THREE.Vector3(o.x,o.z,-o.y)}}}();
TRACKER.namespace("Player"),TRACKER.Player=function(){"use strict";function e(e){var a=e||{};return D.date=a.date||new Date,D.width=$(document).width(),D.onDateChangeCallback=a.onDateChangeCallback||null,D.toggleCoordinatesCallback=a.toggleCoordinatesCallback||null,D.changeCameraViewCallback=a.changeCameraViewCallback||null,D.changeTextureResCallback=a.changeTextureResCallback||null,D.snapshotCallback=a.snapshotCallback||null,D.updateScale(D.range,D.width),D.updateDateRange(D.date),D.updateHover(),$("#play").click(D.togglePlay),$("#rewind").click(D.rewind),$("#forward").click(D.forward),$("#now").click(D.toNow),$("#speed").click(D.toggleSpeed),$("#coordinate_system").click(D.toggleCoordinates),$("#camera_view").click(D.showPopup("#camera_view_popup")),$("#hd").click(D.showPopup("#hd_popup")),$("#camera_view_popup .st-popup-item").click(D.changeCameraViewCallback),$("#hd_popup .st-popup-item").click(D.onTextureResChange),$("#snapshot").click(D.snapshotCallback),$(".st-progress-bar").mousedown(D.onDateClicked).mousemove(D.onDateChange).mouseenter(D.showPrehover).mouseleave(D.hidePrehover),$(document).mousemove(D.onDateClickedAndMove).mouseup(D.dateClicked).mouseup(D.hidePopup),D}function a(e){D.clicked=!1}function t(){D.date.setUTCMonth(D.date.getUTCMonth()+1),D.updateDateRange(D.date),D.play||"function"!=typeof D.onDateChangeCallback||D.onDateChangeCallback()}function n(e){var a=$(".st-popup");a.is(e.target)||0!==a.has(e.target).length||a.hide()}function o(){D.clicked||($(".st-hover-progress").hide(100),$(".st-selected-date").hide(100))}function l(e){var a=new Date(D.startDate+D.scale*e.pageX);$(".st-selected-date").css({left:D.width/2>=e.pageX?e.pageX:"auto",right:D.width/2<e.pageX?D.width-e.pageX:"auto"}).text(a),$(".st-hover-progress").css({width:e.pageX}),D.clicked&&($(".st-play-progress").css({width:e.pageX}),D.date=a,D.play||"function"!=typeof D.onDateChangeCallback||D.onDateChangeCallback())}function c(e){D.clicked=!0,D.onDateChange(e)}function i(e){D.clicked&&D.onDateChange(e)}function s(){var e=$(this).attr("texture-res");$("#hd i").text(e),"function"==typeof D.changeTextureResCallback&&D.changeTextureResCallback.apply(this)}function d(){D.date.setUTCMonth(D.date.getUTCMonth()-1),D.updateDateRange(D.date),D.play||"function"!=typeof D.onDateChangeCallback||D.onDateChangeCallback()}function r(e){return function(){var a=$(e),t=$(this);a.width()/2;$(".st-popup-arrow").css({left:$(document).width()-t.offset().left+t.outerWidth()/2-5}),a.toggle(100)}}function g(){$(".st-hover-progress").show(100),$(".st-selected-date").show(100)}function u(){D.play=!D.play,$("#pause_button").toggleClass("hide"),$("#play_button").toggleClass("hide")}function p(){$(this).toggleClass("warning"),D.coordinateSystem="heliocentric"===D.coordinateSystem?"geocentric":"heliocentric","function"==typeof D.toggleCoordinatesCallback&&D.toggleCoordinatesCallback()}function h(){$(this).toggleClass("red"),D.speed=1e3===D.speed?3e3:1e3}function C(){D.date=new Date,D.updateDateRange(D.date),D.play||"function"!=typeof D.onDateChangeCallback||D.onDateChangeCallback()}function k(e){return D.startDate=new Date(e.getFullYear(),e.getMonth(),1).getTime(),D.endDate=new Date(e.getFullYear(),e.getMonth()+1,0).getTime(),D.range=D.endDate-D.startDate,D.updateScale(D.range,D.width),D}function w(){$(".st-play-progress").css({width:(D.date.getTime()-D.startDate)/D.scale})}function f(e,a){D.width=a,D.scale=D.range/D.width}var D={};return D.onDateChangeCallback=null,D.changeCameraViewCallback=null,D.changeTextureResCallback=null,D.clicked=!1,D.coordinateSystem="geocentric",D.date=null,D.play=!0,D.speed=1e3,D.snapshotCallback=null,D.toggleCoordinatesCallback=null,D.width=null,D.init=e,D.dateClicked=a,D.forward=t,D.hidePopup=n,D.hidePrehover=o,D.onDateChange=l,D.onDateClicked=c,D.onDateClickedAndMove=i,D.onTextureResChange=s,D.rewind=d,D.showPopup=r,D.showPrehover=g,D.toggleCoordinates=p,D.togglePlay=u,D.toggleSpeed=h,D.toNow=C,D.updateDateRange=k,D.updateHover=w,D.updateScale=f,D}();
TRACKER.namespace("Satellite"),TRACKER.Satellite=function(){"use strict";var t;TRACKER.utils.Constants,TRACKER.utils.CoordinateConverter;return t=function(t,e,o){this.object3d=o,this.satrec=satellite.twoline2satrec(t.line1,t.line2),this.scale=e},t.prototype.setObj=function(t){this.object3d=t},t.prototype.position=function(t,e){var o=satellite.propagate(this.satrec,t.getUTCFullYear(),t.getUTCMonth()+1,t.getUTCDate(),t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds()).position;return new THREE.Vector3(o.x,o.z,-o.y).divideScalar(this.scale)},t.prototype.propagate=function(t,e){var o=this.position(t,e);return this.object3d.position.copy(o),o},t.prototype.rotateY=function(t){var e=new THREE.Vector3(0,1,0);this.object3d.position.applyAxisAngle(e,t)},t}();
TRACKER.namespace("Sun"),TRACKER.Sun=function(){"use strict";function t(t){return t%1}function e(t){var e,i,n=t.lensFlares.length,s=2*-t.positionScreen.x,o=2*-t.positionScreen.y;for(e=0;n>e;e++)i=t.lensFlares[e],i.x=t.positionScreen.x+s*i.distance,i.y=t.positionScreen.y+o*i.distance,i.rotation=0;t.lensFlares[2].y+=.025,t.lensFlares[3].rotation=.5*t.positionScreen.x+THREE.Math.degToRad(45)}var i=TRACKER.utils.Constants,n=TRACKER.utils.CoordinateConverter,s=TRACKER.utils.DateConverter,o=function(t,i,n){var s=new THREE.Color(16777215);i?s.setHSL(i.h,i.s,i.l+.5):s.setHSL(.55,.9,1),this.light=new THREE.DirectionalLight(16777215,1),this.lensFlare=new THREE.LensFlare(t[0],350,0,THREE.AdditiveBlending,s),this.lensFlare.add(t[1],512,0,THREE.AdditiveBlending),this.lensFlare.add(t[2],60,.6,THREE.AdditiveBlending),this.lensFlare.add(t[2],70,.7,THREE.AdditiveBlending),this.lensFlare.add(t[2],120,.9,THREE.AdditiveBlending),this.lensFlare.add(t[2],70,1,THREE.AdditiveBlending),this.lensFlare.customUpdateCallback=e,this.scale=n||63.71};return o.prototype.sunEclipticPosition=function(e){var n=s.utcToTdb(e),o=(n-i.MJD2000)/i.JULIAN_C,a=i.PI2*t(.993133+99.997361*o),r=i.PI2*t(.7859453+a/i.PI2+(6893*Math.sin(a)+72*Math.sin(2*a)+6191.2*o)/1296e3),l=0,d=1.0001398+1e-6*((-16707.37+42.04*o)*Math.cos(a)-139.57*Math.cos(2*a)+30.76*Math.cos(i.PI2*t(.8274+1236.8531*o)));return{lambda:r,betta:l,range:d*i.AU}},o.prototype.position=function(t){var e=s.utcToTdb(t),i=this.sunEclipticPosition(t),o=n.eclipSpherToEquCart(e,i.lambda,i.betta,i.range);return new THREE.Vector3(o.x,o.z,-o.y).divideScalar(this.scale)},o.prototype.propagate=function(t){var e=this.position(t);return this.lensFlare.position.copy(e),this.light.position.copy(e),e},o.prototype.rotateY=function(t){var e=new THREE.Vector3(0,1,0);this.lensFlare.position.applyAxisAngle(e,t),this.light.position.applyAxisAngle(e,t)},o}();
//# sourceMappingURL=elektro-tracker.min.js.map
